package bean;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;


import dao.ConnectDataBase;
import utils.DBUtilsGiaoVien;

/**
 * BaiHoc generated by hbm2java
 */
public class BaiHoc implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private String maBaiHoc;
	private String khoaHoc;
	private String tenBaiHoc;
	private String moTaNoiDung;
	private TaiNguyen taiNguyen;
	private List<BinhLuan> listBinhLuans;
	private int count=0;
	
	public BaiHoc() {
	}

	public BaiHoc(String maBaiHoc) {
		this.maBaiHoc = maBaiHoc;
	}

	public BaiHoc(String maBaiHoc, String khoaHoc, String tenBaiHoc, String moTaNoiDung) {
		this.maBaiHoc = maBaiHoc;
		this.khoaHoc = khoaHoc;
		this.tenBaiHoc = tenBaiHoc;
		this.moTaNoiDung = moTaNoiDung;
	}
	
	public String autoID(Connection conn) throws SQLException
	{
		String sql = "SELECT MAX(RIGHT(MaBaiHoc, 4)) as SoLuong FROM BaiHoc";
		
		PreparedStatement pstm=null;
		try {
			pstm = conn.prepareStatement(sql);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        ResultSet rs = pstm.executeQuery();
        String kqString="";
        while (rs.next()) 
        {
        	int soluong = Integer.parseInt(rs.getString("SoLuong"));
        	System.out.print(soluong);
        	if (soluong+1<10)
        		kqString= "BH000"+ String.valueOf(soluong+1);
        	else {
				kqString= "BH00"+ String.valueOf(soluong+1);
			}
        }
        return kqString;  
	}
	
	public void addBaiHoc(Connection conn) throws SQLException
	{
		DBUtilsGiaoVien.ThemBaiHoc(conn, this);
	}
	
	public BaiHoc(Connection conn,String khoaHoc, String tenBaiHoc, String moTaNoiDung) throws SQLException {
		this.maBaiHoc = autoID(conn);
		System.out.print(this.maBaiHoc);
		this.khoaHoc = khoaHoc;
		this.tenBaiHoc = tenBaiHoc;
		this.moTaNoiDung = moTaNoiDung;
		addBaiHoc(conn);
	}

	public String getMaBaiHoc() {
		return this.maBaiHoc;
	}

	public void setMaBaiHoc(String maBaiHoc) {
		this.maBaiHoc = maBaiHoc;
	}

	public String getKhoaHoc() {
		return this.khoaHoc;
	}

	public void setKhoaHoc(String khoaHoc) {
		this.khoaHoc = khoaHoc;
	}

	public String getTenBaiHoc() {
		return this.tenBaiHoc;
	}

	public void setTenBaiHoc(String tenBaiHoc) {
		this.tenBaiHoc = tenBaiHoc;
	}

	public String getMoTaNoiDung() {
		return this.moTaNoiDung;
	}

	public void setMoTaNoiDung(String moTaNoiDung)
	{
		this.moTaNoiDung = moTaNoiDung;
	}
	
	public void getMoTa(Connection conn) throws SQLException
	{
		String sql = "Select * from BaiHoc a where a.MaBaiHoc=?";
        PreparedStatement pstm = conn.prepareStatement(sql);
        pstm.setString(1, this.maBaiHoc);
        ResultSet rs = pstm.executeQuery();
        
        while (rs.next())
        {
        	this.tenBaiHoc=rs.getString("TenBaiHoc");
        	this.moTaNoiDung=rs.getString("MoTaNoiDung");
        	this.khoaHoc=rs.getString("MaKhoaHoc");
        }
      
	}
	
	public void getBinhLuan(Connection conn) throws SQLException
	{
		String sql = "Select * from BinhLuan a where a.MaBaiHoc=? and MaRep is null";
        PreparedStatement pstm = conn.prepareStatement(sql);
        pstm.setString(1, this.maBaiHoc);
        ResultSet rs = pstm.executeQuery();
        BinhLuan tempBinhLuan=null;
        
        String maBaiHocString;
    	String maBinhLuan;
    	String tieuDeString;
    	String noiDungString;
    	String nguoiGuiString;
    	Timestamp ngayDangTimestamp;
    	String rootBinhLuan;
    	
    	List<BinhLuan> repList=new ArrayList<BinhLuan>();
    	
        while (rs.next())
        {
        	maBinhLuan=rs.getString("MaBinhLuan");
        	maBaiHocString=rs.getString("MaBaiHoc");
        	tieuDeString=rs.getString("TieuDe");
        	noiDungString= rs.getString("NoiDung");
        	rootBinhLuan=rs.getString("MaRep");
        	ngayDangTimestamp= (Timestamp) rs.getObject("ThoiGian");
        	nguoiGuiString=rs.getString("NguoiBinhLuan");
        	tempBinhLuan=new BinhLuan(maBinhLuan, maBaiHocString, tieuDeString, noiDungString, nguoiGuiString, ngayDangTimestamp, rootBinhLuan);
        	tempBinhLuan.getAllchild(conn);
        	repList.add(tempBinhLuan);
        }
        this.setListBinhLuans(repList);
	}
	
	
	public BaiHoc getAllInfor(Connection conn,String maBaiHoc) throws SQLException
	{
		this.maBaiHoc=maBaiHoc;
		getMoTa(conn);
		this.setTaiNguyen(new TaiNguyen(conn, maBaiHoc));
		getBinhLuan(conn);
		printList(this.listBinhLuans);
		return this;
	}
	
	public void printList(List<BinhLuan> bl)
	{
		this.count=this.count+1;
		int index=this.count;
		if (bl!=null)
			for(int i=0; i<bl.size(); i++)
			{
				System.out.print(index);
				System.out.print(bl.get(i).getMaBinhLuan());
				System.out.print("  ");
				if (bl.get(i).getRepList()!=null)
					printList(bl.get(i).getRepList());
			}
	}

	public TaiNguyen getTaiNguyen() {
		return taiNguyen;
	}

	public void setTaiNguyen(TaiNguyen taiNguyen) {
		this.taiNguyen = taiNguyen;
	}

	public List<BinhLuan> getListBinhLuans() {
		return listBinhLuans;
	}

	public void setListBinhLuans(List<BinhLuan> listBinhLuans) {
		this.listBinhLuans = listBinhLuans;
	}

	public int getCount() {
		return count;
	}

	public void setCount(int count) {
		this.count = count;
	}
	
	public void SuaBaiGiang(Connection conn, String link) throws SQLException
	{
		DBUtilsGiaoVien.editBaiGiang(conn, this.maBaiHoc, link);
	}
	
	public void SuaLyThuyet(Connection conn, String lyThuyet) throws SQLException
	{
		DBUtilsGiaoVien.editLyThuyet(conn, this.maBaiHoc, lyThuyet);
	}
	
	public void SuaBaiTap(Connection conn, String baiTap) throws SQLException
	{
		DBUtilsGiaoVien.editBaiTap(conn, this.maBaiHoc, baiTap);
	}
	
	
	
	


}
